buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE")
    }
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.3.1'
    id 'com.github.ben-manes.versions' version '0.8'
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'net.researchgate.release' version '2.0.2'
}

apply plugin: 'war'
apply plugin: 'spring-boot'

idea {
    project {
        jdkName sourceCompatibility
        languageLevel sourceCompatibility
    }
}

def profile = project.hasProperty('profile') ? project.profile : 'dev'

ext {
    // default settings
    jettyPort = 8080
    jettyHost = '0.0.0.0'
    datasourceDialect = 'HSQLDB'
    datasourceDriver = 'org.hsqldb.jdbcDriver'
    datasourceUrl = 'jdbc:hsqldb:mem:alfio'
    datasourceUsername = 'sa'
    datasourcePassword = ''
    datasourceValidationQuery = 'SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS'
    springProfilesActive = 'dev'

    switch (profile) {
        case 'dev-pgsql':
            datasourceDialect = 'PGSQL'
            datasourceDriver = 'org.postgresql.Driver'
            datasourceUrl = 'jdbc:postgresql://localhost:5432/alfio'
            datasourceUsername = 'postgres'
            datasourcePassword = 'password'
            datasourceValidationQuery = 'SELECT 1'
            springProfilesActive = 'dev-pgsql'
            break
        case 'docker-test':
            datasourceDialect = 'PGSQL'
            datasourceDriver = 'org.postgresql.Driver'
            datasourceUrl = 'jdbc:postgresql://0.0.0.0:5432/postgres'
            datasourceUsername = 'postgres'
            datasourcePassword = 'postgres'
            datasourceValidationQuery = 'SELECT 1'
            springProfilesActive = 'docker-test'
    }
}

configurations {
    compileOnly
    testCompileOnly
    providedRuntime
    providedCompile
}

repositories {
    jcenter()
}

dependencies {
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "org.springframework.security:spring-security-web:$springSecurityConfigVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityConfigVersion"
    compile "com.samskivert:jmustache:1.10"
    compile "com.github.sps.mustache:mustache-spring-view:1.3"
    compile "javax.mail:mail:1.5.0-b01"
    compile("org.xhtmlrenderer:flying-saucer-pdf:9.0.7") {
        exclude(module: 'bcmail-jdk14')
        exclude(module: 'bcprov-jdk14')
        exclude(module: 'bctsp-jdk14')
    }
    compile "com.google.zxing:core:3.2.0"
    compile "com.google.zxing:javase:3.2.0"
    compile "org.flywaydb:flyway-core:3.1"
    compile "org.postgresql:postgresql:9.4-1201-jdbc41"
    compile "org.apache.tomcat:tomcat-jdbc:8.0.8"
    compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
    compile "org.apache.logging.log4j:log4j-jcl:$log4jVersion"
    compile "com.stripe:stripe-java:$stripeVersion"
    compile "com.google.maps:google-maps-services:0.1.5"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "com.squareup.okhttp:okhttp:2.2.0"
    compile "com.opencsv:opencsv:3.2"

    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "com.insightfullogic:lambda-behave:0.3"

    compileOnly "org.projectlombok:lombok:1.16.2"
    compileOnly "javax.servlet:javax.servlet-api:3.1.0"
    testCompile "javax.servlet:javax.servlet-api:3.1.0"
    testRuntime "org.springframework.boot:spring-boot-starter-test"
    runtime "org.hsqldb:hsqldb:$hsqldbVersion"
    runtime "commons-fileupload:commons-fileupload:1.3.1"
    providedCompile "org.springframework.boot:spring-boot-starter-web@jar"
    providedCompile "org.springframework.boot:spring-boot-starter@jar"
    providedCompile "org.springframework.boot:spring-boot@jar"
    providedCompile "org.springframework.boot:spring-boot-autoconfigure@jar"
    providedRuntime "org.springframework.boot:spring-boot-starter-jetty"
}

sourceSets {
    main {
        compileClasspath += [configurations.compileOnly]
    }
    test {
        compileClasspath += [configurations.testCompileOnly]
    }
}

javadoc {
    classpath += [configurations.compileOnly]
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.compileOnly]
        scopes.PROVIDED.plus += [configurations.testCompileOnly]
    }
}

// -- license configuration

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = false
    mapping {
        java = 'JAVADOC_STYLE'
        sql = 'DOUBLEDASHES_STYLE'
    }
    ext.year = '2014-2015'
    include '**/*.java'
    include '**/*.sql'
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/application.properties'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'projectVersion': project.version,
                'buildDate': java.time.LocalDateTime.now().toString()
        ])
    }
}

bootRun {
    def externalConfig = new File("./custom.jvmargs")
    def opts = []
    if(externalConfig.exists()) {
        opts += externalConfig.readLines()
    }
    opts += [
            "-Dspring.profiles.active=${project.springProfilesActive}",
            "-Ddatasource.dialect=${project.datasourceDialect}",
            "-Ddatasource.driver=${project.datasourceDriver}",
            "-Ddatasource.url=${project.datasourceUrl}",
            "-Ddatasource.username=${project.datasourceUsername}",
            "-Ddatasource.password=${project.datasourcePassword}",
            "-Ddatasource.validationQuery=${project.datasourceValidationQuery}",
            "-Dalfio.version=${project.version}",
            "-Dalfio.build-ts=${java.time.LocalDateTime.now().toString()}"
    ]
    jvmArgs = opts
}

bootRepackage {
    mainClass = 'alfio.config.SpringBootLauncher'
    classifier = 'boot'
}

// -- code-coverage

jacoco {
    toolVersion = '0.7.2.201409121644'
}

jacocoTestReport {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'
    additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
    classDirectories =  project.files(sourceSets.main.output)
    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}